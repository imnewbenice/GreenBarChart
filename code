<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chart Code Generator</title>
  <script src="https://cdn.jsdelivr.net/npm/xlsx/dist/xlsx.full.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    .container { max-width: 800px; margin: auto; }
    textarea { width: 100%; height: 100px; margin-bottom: 10px; }
    button { padding: 10px 20px; font-size: 16px; cursor: pointer; }
    canvas { margin-top: 20px; }
  </style>
</head>
<body>
  <div class="container">
    <h1>Chart Code Generator</h1>
    <p>Upload your Excel file or paste your data to generate chart code:</p>
    <input type="file" id="fileInput" accept=".xlsx" />
    <p>OR</p>
    <textarea id="dataInput" placeholder="Paste your data here (comma-separated values)"></textarea>
    <button id="generateButton">Generate Chart Code</button>
    <h3>Generated Chart Code:</h3>
    <textarea id="codeOutput" readonly></textarea>
    <canvas id="chartPreview"></canvas>
  </div>

  <script>
    document.getElementById("generateButton").addEventListener("click", () => {
      const fileInput = document.getElementById("fileInput").files[0];
      const dataInput = document.getElementById("dataInput").value;
      if (fileInput) {
        parseExcel(fileInput);
      } else if (dataInput.trim()) {
        parseText(dataInput);
      } else {
        alert("Please upload an Excel file or paste data.");
      }
    });

    // Parse Excel File
    function parseExcel(file) {
      const reader = new FileReader();
      reader.onload = (event) => {
        const data = new Uint8Array(event.target.result);
        const workbook = XLSX.read(data, { type: "array" });
        const sheetName = workbook.SheetNames[0];
        const sheet = workbook.Sheets[sheetName];
        const json = XLSX.utils.sheet_to_json(sheet, { header: 1 });
        processData(json);
      };
      reader.readAsArrayBuffer(file);
    }

    // Parse Text Input
    function parseText(input) {
      const rows = input.trim().split("\n").map(row => row.split(","));
      processData(rows);
    }

    // Process Data into Chart Code
    function processData(data) {
      const labels = data.map(row => row[0]); // First column as labels
      const values = data.map(row => parseFloat(row[1])); // Second column as data

      if (labels.length === 0 || values.length === 0 || isNaN(values[0])) {
        alert("Invalid data format. Ensure it's label,data in each row.");
        return;
      }

      const chartCode = generateChartCode(labels, values);
      document.getElementById("codeOutput").value = chartCode;
      renderPreview(labels, values);
    }

    // Generate Chart Code
    function generateChartCode(labels, data) {
      return `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Generated Chart</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <canvas id="myChart"></canvas>
  <script>
    const ctx = document.getElementById('myChart').getContext('2d');
    const chart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ${JSON.stringify(labels)},
        datasets: [{
          label: 'Dataset',
          data: ${JSON.stringify(data)},
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          borderColor: 'rgba(75, 192, 192, 1)',
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: { beginAtZero: true }
        }
      }
    });
  </script>
</body>
</html>
      `.trim();
    }

    // Render Chart Preview
    function renderPreview(labels, data) {
      const ctx = document.getElementById("chartPreview").getContext("2d");
      new Chart(ctx, {
        type: "bar",
        data: {
          labels: labels,
          datasets: [{
            label: "Preview",
            data: data,
            backgroundColor: "rgba(75, 192, 192, 0.2)",
            borderColor: "rgba(75, 192, 192, 1)",
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          scales: { y: { beginAtZero: true } }
        }
      });
    }
  </script>
</body>
</html>
